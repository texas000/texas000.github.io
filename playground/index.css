/* style query demo */
/* want to see if the --detail var is not blank, then set the content to the content of its value */
@container style(--detail: new) {
    /*  Can i reduce redundancy here?  */
    .comment-block {
      display: block;
    }
    
    .comment-block::after {
      content: 'New';
      /*   I shouldn't have to have this here   */
      border: 1px solid currentColor;
      background: white;
      position: absolute;
      bottom: 0.5rem;
      right: 0.5rem;
      padding: 0.1rem 0.3rem;
    }
  }
  
  @container style(--detail: low-stock) {
    /*  Can i reduce redundancy here?  */
    .comment-block {
      display: block;
    }
    
    .comment-block::after {
      content: 'Low Stock';
      border: 1px solid currentColor;
      background: white;
      position: absolute;
      bottom: 0.5rem;
      right: 0.5rem;
      padding: 0.1rem 0.3rem;
    }
    
    .media-img {
      border: 2px solid #c17474;
    }
  }
  
  /* CQ size adjustments */
  @container (min-width: 400px) {
    .product-card p {
      font-size: 1.2rem;
    }
    
    .color-list li {
      width: 1rem;
      height: 1rem;
    }
    
    .comment-block:after {
      bottom: 1rem;
      right: 1rem;
      font-size: 1.2rem;
    }
  }
  
  /* MQ changes */
  @media (max-width: 800px) {
    .view-buttons {
      display: none;
    }
    
    .four-by {
      grid-template-columns: 1fr 1fr;
    }
  }
  
  .product-card {
    width: 100%;
  }
  
  
  @layer product-demo-base {
    .comment-block {
      display: none;
    }
  }
  
  @layer product-base {
    .product-area {
      max-width: 1200px;
      margin: 0 auto;
    }
    
    .product-list {
      display: grid;
      gap: 1rem;
    }
    
    .media-img {
      position: relative;
      aspect-ratio: 3 / 4;
      width: 100%;
      box-sizing: border-box;
    }
    
    .media-img img {
      width: 100%;
      height: 100%;
      display: block;
      object-fit: cover;
    }
    
    .meta {
      padding: 0.5rem 0.5rem 0;
    }
    
    .meta p {
      margin: 0;
    }
    
    .color-list {
      margin-top: 1rem;
      padding: 0;
      display: flex;
      gap: 0.25rem;
    }
    
    .color-list li {
      font-size: 0;
      width: 0.75rem;
      height: 0.75rem;
      display: inline-block;
      border-radius: 50%;
      position: relative;
      border: 1px solid;
    }
    
    .color-list li:hover,
    .color-list li:focus {
      border-color: white;
    }
    
    .section-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .section-header button {
      border: none;
      background: none;
      font-family: Roboto Mono, monospace;
    }
    
    .section-header button:hover,
    .section-header button:focus {
        text-decoration: underline;
    }
    
    .four-by {
      grid-template-columns: 1fr 1fr 1fr 1fr;
    }
    /*  attr() color interpolation or getting value from a data attr would be really useful for these color lists  */
    .color-list li {
      background-color: red;
    }
    
    /*  Mini :has() demo  */
    /*  Only show 5 colors, but hint at more  */
    /*  If the color list has 6 or more children, apply a (+ more) indicator to the 5th child and hide the rest  */
    .color-list:has(:nth-child(n + 6)) li:nth-child(5)::after {
      content: '+ more colors';
      display: inline;
      position: absolute;
      left: calc(100% + 0.5rem);
      width: max-content;
      font-size: 0.75rem;
    }
    
    .color-list:has(:nth-child(n + 6)) li:nth-child(n + 6) {
      display: none;
    }
    
  }
  
  @layer page-base {
    body {
      font-family: Roboto Mono, monospace;
    }
  }